FROM nvidia/cuda:12.1.0-devel-ubuntu22.04

# build args
# ARG ROBOT_TYPE=${ROBOT_TYPE}
ARG ROBOT_TYPE=fr3
ARG LIBFRANKA_VERSION=${LIBFRANKA_VERSION}
ARG ROBOT_IP=${ROBOT_IP}
ARG NUC_IP=${NUC_IP}
ARG NUC_ROBOT_CONFIG_DIR=/app/config/${ROBOT_TYPE}
ARG NUC_OCULUS_DIR=/app/droid/oculus_reader
ARG NUC_POLYMETIS_DIR=/app/droid/fairo/polymetis
ARG NUC_POLYMETIS_CONFIG_DIR=${NUC_POLYMETIS_DIR}/polymetis/conf

# runtime env vars
ENV ROBOT_TYPE=${ROBOT_TYPE}
ENV LIBFRANKA_VERSION=${LIBFRANKA_VERSION}
ENV ROBOT_IP=${ROBOT_IP}
ENV NUC_IP=${NUC_IP}
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}compute,video,utility

# copy project code to container
COPY . /app
WORKDIR /app

# base system installations
RUN apt-get update && \
    apt-get install -y software-properties-common build-essential sudo git curl wget python3-pip libspdlog-dev \
    libeigen3-dev lsb-release ffmpeg libsm6 libxext6 zstd && \
    apt-get upgrade -y

# install miniconda 
RUN wget \
    https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && mkdir /root/.conda \
    && bash Miniconda3-latest-Linux-x86_64.sh -b \
    && rm -f Miniconda3-latest-Linux-x86_64.sh
# (수정)
ENV PATH=/root/miniconda3/bin:$PATH
#RUN conda --version && conda update -y conda
RUN conda --version
RUN conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main
RUN conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r
RUN conda config --system --remove-key channels || true \
 && conda config --system --add channels conda-forge \
 && conda config --system --set channel_priority strict \
 && conda config --system --set always_yes true

RUN conda create -n robot python=3.7
SHELL ["bash", "-lc"]
RUN source activate robot && python -V && pip -V

# install the zed sdk
ARG UBUNTU_RELEASE_YEAR=22
ARG ZED_SDK_MAJOR=4
ARG ZED_SDK_MINOR=0
ARG CUDA_MAJOR=12
ARG CUDA_MINOR=1

RUN echo "Europe/Paris" > /etc/localtime ; echo "CUDA Version ${CUDA_MAJOR}.${CUDA_MINOR}.0" > /usr/local/cuda/version.txt

# setup the ZED SDK
RUN apt-get update -y || true ; apt-get install --no-install-recommends lsb-release wget less udev sudo zstd build-essential cmake python3 python3-pip libpng-dev libgomp1 -y && \ 
    python3 -m pip install numpy opencv-python && \
    wget -q -O ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run https://download.stereolabs.com/zedsdk/${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}/cu${CUDA_MAJOR}${CUDA_MINOR%.*}/ubuntu${UBUNTU_RELEASE_YEAR} && \
    chmod +x ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run && \
    ./ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run -- silent skip_tools skip_cuda && \
    ln -sf /lib/x86_64-linux-gnu/libusb-1.0.so.0 /usr/lib/x86_64-linux-gnu/libusb-1.0.so && \
    rm ZED_SDK_Linux_Ubuntu${UBUNTU_RELEASE_YEAR}.run && \
    rm -rf /var/lib/apt/lists/*
#RUN conda install -c conda-forge libstdcxx-ng requests # required for pyzed
RUN conda install -n robot libstdcxx-ng requests

#RUN source activate robot && python /usr/local/zed/get_python_api.py && python -m pip install --ignore-installed /app/pyzed-4.0-cp37-cp37m-linux_x86_64.whl
RUN source activate robot \
 && python /usr/local/zed/get_python_api.py \
 && python -m pip install --ignore-installed /app/pyzed-4.0-cp37-cp37m-linux_x86_64.whl

# install oculus reader
RUN apt-get update -y && apt-get install -y android-tools-fastboot android-tools-adb
RUN source activate robot && pip install -e $NUC_OCULUS_DIR

# python environment setup
RUN source activate robot && pip install -e . \
 && pip install "numpy<2" "gym==0.26.*" \
 && pip install dm-robotics-moma==0.5.0 --no-deps \
 && pip install dm-robotics-transformations==0.5.0 --no-deps \
 && pip install dm-robotics-agentflow==0.5.0 --no-deps \
 && pip install dm-robotics-geometry==0.5.0 --no-deps \
 && pip install dm-robotics-manipulation==0.5.0 --no-deps \
 && pip install dm-robotics-controllers==0.5.0 --no-deps


# using miniconda instead of anaconda so overwrite sh scripts
RUN find /app/droid/franka -type f -name "launch_*.sh" -exec sed -i 's/anaconda/miniconda/g' {} \;
RUN find /app/scripts/server -type f -name "launch_server.sh" -exec sed -i 's/anaconda/miniconda/g' {} \;

# set absolute paths
RUN find /app/droid/franka -type f -name "launch_*.sh" -exec sed -i 's|~|/root|g' {} \;
RUN find /app/scripts/server -type f -name "launch_server.sh" -exec sed -i 's|~|/root|g' {} \;

RUN ls -la /app/droid/fairo || true && find /app/droid/fairo -maxdepth 3 -type d | sort | sed -n '1,200p'

# set polymetis config files
RUN set -e; \
    POLY_BASE="${NUC_POLYMETIS_DIR}"; \
    CONF_A="${POLY_BASE}/polymetis/conf"; \
    CONF_B="${POLY_BASE}/conf"; \
    if [ -d "$CONF_A" ]; then POLY_CONF="$CONF_A"; \
    elif [ -d "$CONF_B" ]; then POLY_CONF="$CONF_B"; \
    else POLY_CONF="$CONF_A"; mkdir -p "$POLY_CONF"; fi; \
    mkdir -p "$POLY_CONF/robot_client" "$POLY_CONF/robot_model"; \
    echo "[INFO] Using POLY_CONF=$POLY_CONF"; \
    ls -la "$POLY_CONF" || true; \
    cp "${NUC_ROBOT_CONFIG_DIR}/franka_hardware.yaml" "$POLY_CONF/robot_client/franka_hardware.yaml"; \
    cp "${NUC_ROBOT_CONFIG_DIR}/franka_panda.yaml"    "$POLY_CONF/robot_model/franka_panda.yaml"

# start the server
RUN chmod +x /app/.docker/laptop/entrypoint.sh
ENTRYPOINT ["/app/.docker/laptop/entrypoint.sh"]
