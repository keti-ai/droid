# Jetson Orin (aarch64), no sim deps, Polymetis + Franka only
FROM ubuntu:20.04

# -------- Build args --------
ARG ROBOT_TYPE=${ROBOT_TYPE}
ARG LIBFRANKA_VERSION=${LIBFRANKA_VERSION}
ARG ROBOT_IP=${ROBOT_IP}
ARG NUC_IP=${NUC_IP}
ARG NUC_POLYMETIS_DIR=/app/droid/fairo/polymetis
ARG NUC_ROBOT_CONFIG_DIR=/app/config/${ROBOT_TYPE}
ARG NUC_POLYMETIS_CONFIG_DIR=${NUC_POLYMETIS_DIR}/polymetis/conf

# -------- Runtime env --------
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Seoul
ENV ROBOT_TYPE=${ROBOT_TYPE}
ENV LIBFRANKA_VERSION=${LIBFRANKA_VERSION}
ENV ROBOT_IP=${ROBOT_IP}
ENV NUC_IP=${NUC_IP}

# -------- Base packages --------
RUN apt-get purge -y cmake && \
    wget https://cmake.org/files/v3.25/cmake-3.25.3-linux-aarch64.tar.gz && \
    tar -zxvf cmake-3.25.3-linux-aarch64.tar.gz -C /usr/local --strip-components=1 && \
    rm cmake-3.25.3-linux-aarch64.tar.gz

RUN apt-get update && \
    apt-get install -y tzdata software-properties-common build-essential sudo \
    git curl wget python3-pip libspdlog-dev libeigen3-dev lsb-release ffmpeg \
    libsm6 libxext6 zstd pkg-config ninja-build \
    libyaml-cpp-dev liburdfdom-dev liburdfdom-headers-dev libpoco-dev \
    doxygen graphviz \
    libprotobuf-dev protobuf-compiler \
    libassimp-dev \
      liburdfdom-dev liburdfdom-headers-dev \
    libpoco-dev \
    openmpi-bin libopenmpi-dev \
    patchelf \
    && apt-get upgrade -y && rm -rf /var/lib/apt/lists/*

# -------- CMake 최신 --------
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \
      gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null \
 && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main' \
 && apt-get update && apt-get install -y cmake

# -------- 프로젝트 복사 --------
COPY . /app
WORKDIR /app

# -------- Miniconda (aarch64) --------
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh \
    && mkdir -p /root/.conda \
    && bash Miniconda3-latest-Linux-aarch64.sh -b \
    && rm -f Miniconda3-latest-Linux-aarch64.sh
ENV PATH=/root/miniconda3/bin:$PATH

# -------- Conda 설정 & 환경 생성(ARM-친화 env) --------
WORKDIR ${NUC_POLYMETIS_DIR}
# 아래 env 파일은 답변 맨 아래에 있음(arm_polymetis_env.yml)
# COPY arm_polymetis_env.yml ${NUC_POLYMETIS_DIR}/arm_polymetis_env.yml

RUN conda config --set always_yes yes \
 && conda config --set changeps1 false \
 && conda config --env --set channel_priority strict \
 && conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main \
 && conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r \
 && conda env create -f arm_polymetis_env.yml


# conda run 기본 쉘
SHELL ["conda", "run", "-n", "polymetis-local", "/bin/bash", "-c"]

RUN pip install --upgrade pip==23.3.2

RUN pip install \
    grpcio==1.56.2 \
    pybullet==3.2.6 \
    mujoco==3.1.6 \
    hydra-core==1.0.6 \
    importlib-resources==5.7.1 \
    plotly dash pymodbus==2.5.3

# -------- (중요) Jetson용 PyTorch 설치 --------
RUN pip install --upgrade pip==23.3.2 && \
    pip install --no-cache-dir \
      https://developer.download.nvidia.com/compute/redist/jp/v50/pytorch/torch-1.12.0a0+2c916ef.nv22.3-cp38-cp38-linux_aarch64.whl \
      torchvision==0.13.0 \
      torchaudio==0.12.1

# -------- Polymetis 파이썬 설치 --------
# (setup.cfg/pyproject.toml에 맞춰 파이썬 파트만 설치)
RUN pip install --no-deps -e polymetis

# -------- libfranka & Polymetis C++ 빌드 --------
#   - apt로 깔아둔 Poco/Eigen/spdlog/yaml-cpp/urdfdom 사용
RUN ./scripts/build_libfranka.sh ${LIBFRANKA_VERSION} && \
    mkdir -p ./polymetis/build && cd ./polymetis/build && \
    cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_FRANKA=ON -DBUILD_TESTS=ON -DBUILD_DOCS=ON && \
    ninja

# -------- 설정 파일 배치 --------
WORKDIR /app
RUN cp ${NUC_ROBOT_CONFIG_DIR}/franka_hardware.yaml ${NUC_POLYMETIS_CONFIG_DIR}/robot_client/franka_hardware.yaml && \
    cp ${NUC_ROBOT_CONFIG_DIR}/franka_panda.yaml ${NUC_POLYMETIS_CONFIG_DIR}/robot_model/franka_panda.yaml

# -------- 최상위 파이썬 패키지들 설치(선택) --------
# (dm-robotics-* 는 의존성 무시 옵션이므로, 필요한 경우에만 유지)
RUN pip3 install -e . && \
    pip3 install dm-robotics-moma==0.5.0 --no-deps && \
    pip3 install dm-robotics-transformations==0.5.0 --no-deps && \
    pip3 install dm-robotics-agentflow==0.5.0 --no-deps && \
    pip3 install dm-robotics-geometry==0.5.0 --no-deps && \
    pip3 install dm-robotics-manipulation==0.5.0 --no-deps && \
    pip3 install dm-robotics-controllers==0.5.0 --no-deps || true

# -------- miniconda 경로 치환 --------
RUN find /app/droid/franka -type f -name "launch_*.sh" -exec sed -i 's/anaconda/miniconda/g' {} \; && \
    find /app/scripts/server -type f -name "launch_server.sh" -exec sed -i 's/anaconda/miniconda/g' {} \; && \
    find /app/droid/franka -type f -name "launch_*.sh" -exec sed -i 's|~|/root|g' {} \; && \
    find /app/scripts/server -type f -name "launch_server.sh" -exec sed -i 's|~|/root|g' {} \;

# -------- 엔트리 포인트 --------
RUN chmod +x /app/scripts/server/launch_server.sh
ENTRYPOINT ["/app/scripts/server/launch_server.sh"]
